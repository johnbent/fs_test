There are two requirements for an experiments file:
1) It must have a .py extension
2) It must define a get_commands( expr_mgmt_options ) function which returns a list of mpirun
commands.  Experiment_management is going to call this method in order to generate commands
that are to be run. If you want to use msub, the mpirun commands need to also include
a -np N notation.

Here's the simplest experiments file possible:
>>> def get_commands( expr_mgmt_options ):
>>>    return [ "mpirun -np 1 hostname", "mpirun -np 2 hostname" ]

A discussion as to why get_commands must accept a data structure (named
expr_mgmt_options above) is given below. 

There are much better options than just hand-writing a list of mpirun
commands in the get_commands method, however. Take a look at
./fs_test_template.py and ./ior_template.py to get an idea of this. These
experiments define a couple of different data structures, they pass these to a
helper routine, expr_mgmt.get_commands, and they get back an automatically
generated list of mpirun commanands.  This is very useful for doing parameter
sweeps for example.

To get this functionality, the experiment's get_commands method can
define 3 data structures and 2 variables:

1) mpi_options{} : a dictionary of keys mapping to arrays (optional)
   e.g. "np"     : range(1,4,1)+range(4,8,2)+range(8,16,4),

2) mpi_program : the path to the actual mpi job itself  (required)

3) program_options : just like mpi_options{} (optional)

4) program_arguments : an array of arrays for required arguments (optional)

5) mpirun : an alternative path to mpirun : useful if mpirun is in some weird
location not in the user's path.  However, ior.py and mdtest.py use this to
pass their wrapper scripts so their mpirun looks like "wrapper.script mpirun"

Then the experiment's get_commands method can call expr_mgmt.get_commands
like this:
>>> def get_commands (expr_mgmt_options):
>>>     return expr_mgmt.get_commands(expr_mgmt_options=expr_mgmt_options,
>>>         mpi_options=mpi_options, mpi_program=mpi_program, 
>>>         program_options=program_options, mpirun=mpirun)

More ambitious lists of mpirun commands can be generated by changing
the data structures and/or variables, calling expr_mgmt.get_commands multiple
times, collect all the lists into one, and return it.

Expr_mgmt_options is a reqiured parameter for expr_mgmt.get_commands. It is a
dictionary that experiment_management creates after parsing all command line
and config file options. Due to how python namespaces work and the way
experiment_management works with the input file, this dictionary needs to be
passed to the input file's get_commands method and then passed on to
expr_mgmt's get_commands method. Since it is required by expr_mgmt.get_commands,
experiment_management will always pass it to the experiment's get_commands
function. An error will result if the experiment's get_commands function
does not accept it.

There are some LANL-isms as well although this tool is intended to work for any
and all situations in which a user wants to run multiple mpi jobs.  Take a look
at some of the LANL experiments for more info about these LANL-isms.
